data Nat where
    zero : Nat
    succ : Nat -> Nat

data List {a:Type} where
    nil : List{a}
    cons : a -> List{a} -> List{a}

lnil := List.nil
lcons := List.cons

data Option {a:Type} where
    some : a -> Option{a}
    none : Option{a}

some := Option.some
none := Option.none

at {a} (n: Nat) (xs: List{a}) : Option a :=
    case xs of
        List.nil y ys => case n of
            Nat.zero => some y,
            Nat.succ _ => at (n-1) ys
        List.cons => none

map {a} {b} (f: a->b) (xs: List{a}) : List b :=
    case xs of
        List.nil => lnil,
        List.cons y ys => lcons (f y) (map f ys)