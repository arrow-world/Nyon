data List {a}
    nil : List{a}
    cons : a -> List{a} -> List{a}

lnil := List.nil
lcons := List.cons : {a:Type} -> a -> List{a} -> List{a}

at {a} (n: Nat) (xs: List{a}) : Option{a} :=
    case xs of
        lcons y ys => case n of
            0 => some y,
            _ => self.at (n-1) ys
        lnil => none

map {a} {b} (f: a->b) (xs: List{a}) : List{b} :=
    case xs of
        lnil => lnil,
        lcons y ys => lcons (f y) (self.map f ys)