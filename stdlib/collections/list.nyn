data Option (a:Type) {
    none : Option a
    some : a -> Option a
}

data Nat {
    zero : Nat
    succ : Nat -> Nat
}

data List (a:Type) {
    nil : List a
    cons : a -> List a -> List a
}

lnil = List.nil
lcons = List.cons

some = Option.some
none = Option.none

at {a} (n: Nat) (xs: List a) : Option a =
    match xs {
        List.nil y ys => match n {
            Nat.zero => some y
            Nat.succ k => at k ys
        }
        List.cons => none
    }

map {a} {b} (f: a->b) (xs: List a) : List b =
    matxh xs {
        List.nil => lnil,
        List.cons y ys => lcons (f y) (map f ys)
    }