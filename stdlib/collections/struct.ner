type FinSortedMap{ord k}{v} => List{k*v} / sort_by (compare*first) where 
    all \(x,_). unique_exists ((=x)*second)

type Dict {a} == FinSortedMap{meta.Symbol}{a}

type FieldTypes == Dict{Type}
typelist (ft: FieldTypes) := map second ft.raw.raw

type Struct{FT: FieldTypes} => Tuple[typelist FT] where
    