datatype Tuple : List[Type] -> Type
    nil : Tuple[List.nil]
    cons[T, Ts] : T -> Tuple[Ts] -> Tuple[T :: Ts]

alias Tuple.{nil as tnil, cons as tcons}

at [Ts] (n: Nat) (xs: Tuple[Ts]) : (list.at n Ts) :=
    match xs
        tcons(y, ys) => match n
            0 => some(y),
            k => self.at(n-1, ys)
        [] => none,

map [Ts,Us] (f: Tuple[list.zip2(Ts,Us) |> \(T,U).(T->U)]) (xs: Tuple[Ts]) : Tuple[Us] :=
    caseof xs
        tnil => tnil,
        tcons(y, ys) => tcons(f(y), self.map(f, ys))