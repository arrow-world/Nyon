datatype nat
    z : nat
    s : nat -> nat

add : nat -> nat -> nat
add m n :=
    case m of
        nat.z => n
        nat.s k => nat.s (add k n)

add : nat -> nat -> nat
mul m n :=
    case m of
        nat.z => nat.z
        nat.s k => add (mul k n) n

id : |T:type| T -> T
id _ x := x
y := id ? $ nat.s nat.z

datatype Bool
    true: Bool
    false: Bool

datatype Maybe T
    none: Maybe
    some: T -> Maybe

z := Maybe.some (?) y

none m :=
    case m of
        Maybe.none T => Bool.true
        Maybe.some T x => Bool.false

some m :=
    case m of
        Maybe.none T => Bool.false 
        Maybe.some T x => Bool.true

p := none z